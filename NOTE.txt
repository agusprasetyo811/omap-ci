OMAP CI PROJECT

# VERSION 4.5
>> Changelog:
- Penambahan config admin_theme setting
- Penambahan Label ADMIN_THEME, THEME, FLUID_THEME & SITE_TEMPLATE
- Add API Access
- Add register_mod_var() Method to register modules variable 

# VERSION 4.4
>> Changelog:
- Penambahan head management
- Penambahan Error Handling
- Penambahan struktur module baru
- Auto reader column from DataBase



# CONFIGURATION
>> Omap-ci configuration
Buka config.php Folder(application/config)
$config['theme'] = 'front'; --> Buat Pilih Theme
$config['admin_theme'] = 'front'; --> Buat Setting Admin_theme jika ada. Default Kosong
$config['html_comperssor'] = FALSE; --> Buat compress HTML (if TRUE) FALSE html tidak dicompresss


# DEFAULR SAMPLE IMPLEMENTATION IN CONTROLLERS
>> PAGES
$this->omap->type('pages');
$this->omap->label('dasbor');
$this->omap->title('any title');
$this->omap->display('any pages');

>> MODULES
$this->omap->type('modules');
$this->omap->title('any title');
$this->omap->display('any module');
>> Jika type ($this->omap->type('any_type)) kosong maka akan secara default menjadi pages


# LABEL REFERENCE
JS = mengembalikan link javascrit berdasarkan template
STYLE = mengembalikan link style berdasarkan template
TEMPLATE = mengembalikan link template
SITE = mengembalikan alamat website
SITE_INDEX = mengembalikan alamat website beserta index.php
SITE_TEMPLATE = mengembalikan alamat website dan forder template
THEME = mengembalikan theme name
ADMIN_THEME = mengembalikan admin_theme name
FLUID_THEME = mengembalikan theme name sesuai dengan posisi apakah dia adalah admin atau front (mengkuti)

>> Penulisanya
html didalam tag {....}
php langsung ditulis ex:JS


# HEAD AUTO BUILDER
>> Head Management --> Buat memenejemen javascript link dan style link di website. Tujuannya biar script yang g diperlukan g usah diload
>> js() --> build_script();
>> style() --> build_style();
>> all js() & style() --> build_head();
Implementasi controllers type PAGES
Ex:
$head[] = js(SITE.'bootstrap/js/bootstrap.js');
$head[] = js(JS.'jquery.template.front.js');
$head[] = js(JS.'jquery.form.js');
$head[] = js(JS.'totemticker/jquery.totemticker.min.js');
$head[] = js(JS.'fancybox/jquery.fancybox-1.3.4.js');
$head[] = js(JS.'fancybox/jquery.mousewheel-3.0.4.pack.js');
$head[] = js(JS.'fancybox/jquery.easing-1.3.pack.js');
$head[] = js(JS.'jquery.fancybox.js');
$head[] = js(JS.'masonri/jquery.masonry.min.js');
$head[] = js(JS.'nivoslider/jquery.nivo.slider.pack.js');
$head[] = js(JS.'caroufredsel/jquery.carouFredSel.packed.js');
$head[] = style(JS.'nivoslider/nivo-slider.css');
$head[] = style(JS.'nivoslider/themes/default/default.css');
$head[] = style(JS.'nivoslider/themes/light/light.css');
$head[] = style(JS.'nivoslider/themes/dark/dark.css');
$head[] = style(JS.'nivoslider/themes/bar/bar.css');
$this->omap->head(build_head($head));



# MODULES AUTO BUILDER
>> mod() --> mendefinisikan modules
>> build_modules --> generate modules dari modules definition mod()
>> Implementasi modules dalam pages
ex:
$mod[] = mod('mod_login__login_register_front_end');
$mod[] = mod('mod_categories');
$mod[] = mod('mod_user_basket');
$mod[] = mod('mod_product');
$mod[] = mod('mod_user_header_menu');
$this->omap->modules(build_modules($mod), $modules_data);

atau

$this->omap->modules('mod_login__login_register_front_end,
mod_categories,
mod_user_basket,
mod_product', $modules_data);

>> SENDING DATA FROM MODULES
$modules_data --> defauld variable



# AUTO READER COLUMN FROM DATABASE OR JSON DATA
>> show_table_column($any_query); --> membaca colom table, return array
>> show_json_column($any_json); --> membaca colom json return array
>> show_json_column_text($json, $sparator, $sort_desc); --> membaca colom json dan dikonversi ke text dan di difinsikan spatator/pemisah serta definisi sortirnya


# PAGES TYPE
>> Module Pages
Biar g kerja 2x maka peraturan buat bikin module didalam pages disisipkan di pages aja,. (Khusus MODULES yang mempunyai kaitan dengan PAGES)
Ex:
PAGES Controller Product have a product_details

# MODULES TYPE
>> Kapan kita bikin module?? Yaitu ketika module itu bersifat global. misal bikin module category(Module category dipakai disemua pages) sesuai kebutuhan


# ERROR HANDLING
>> MODULES NULL = modules tidak terdefinisi atau tidak ada
>> MODULES ERROR = kesalahan penulisan modules saat membuat modules
>> THEMES NULL = pengaturan theme salah dan menyebabkan tidak terdefinisi
>> TYPE ERROR = kesalahan penulisan didalam type modules/pages diluar ex: $this->omap->type('pages__');

# OMAPS-CI API
>> Akses dan Bikin Simple API
API Dibuat didalam modules
>> Method Reference
$this->omap->build_json_data($array_data); --> Formating data ke array dan langsung ditamplkan ke layar
$this->omap->push($data); --> Mengirim data keluar
$this->omap->pull('API_CONTROLLER' 'API_METHOD'); --> Menarik data yang telah di push dengan parameter API_CONTROLLERS dan METHOD_API



==========================
Agus Prasetyo
agusprasetyo811@gmail.com
www.cmlocator.com